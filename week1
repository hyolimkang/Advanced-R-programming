# Week1, Dec1, 2023

Apply control structures to control flow of an R program
Write functions
Design an interface taht allows a user to modify elements of R code

if(<condition1>) {
      ## do something
} else if(<condition2>) {
      ## do something different
} else {
      ## do something different
}
Of course, the else clause is not necessary. 
You could have a series of if clauses that always get executed if their respective conditions are true.
if(<condition1>) {
}
if(<condition2>) {
}

# nested for loops
x <- matrix(1:6, 2, 3)

for(i in seq_len(nrow(x))) {
        for(j in seq_len(ncol(x))) {
                print(x[i, j])
        }   
}

for(i in 1:100) {
      print(i)

      if(i > 20) {
              ## Stop loop after 20 iterations
              break  
      }     
}

# map family: purr package
map_if(1:10, function(x){
  x %% 2 == 0  # x modulo 2 means if the remainder of the division of x by 2 = 0 (is it even number?)
},
function(y){
  y^2
}) %>% unlist() # map_if always produce list, so piping it to make it prettier (unlist)

So, putting it all together, this code will go through each number in the vector 1:5. 
For each number, it checks if the number is even (x %% 2 == 0). 
If the number is even, it applies the squaring function (y^2) to it. The unlist() function then converts the resulting list into a vector.
In summary, for the vector 1:5, this code will square each even number and return a vector with the original odd numbers and the squared even numbers.










